// UML entity-relationship diagram for the droughts game
// Render using https://yuml.me/diagram/plain/class/draw
[Motion| +isCaptureRequired():boolean; +isCaptureForbidden():boolean; +isTouchForbidden():boolean; +isContinuous():boolean; +isRepetitive():boolean; ]
[AbstractMotion| -flags:byte; | ...; ]-.-^[Motion]
[RelativeMotion| -rankOffset:byte; -fileOffset:byte; | +equals(Object):boolean; +hashCode():int; ...; ]-^[AbstractMotion]
[AbsoluteMotion| -sourceRank:byte; -sourceFile:byte; -sinkRank:byte; -sinkFile:byte; | +equals(Object):boolean; +hashCode():int; ...; ]-^[AbstractMotion]

[PieceParty| _+WHITE:PieceParty; _+BLACK:PieceParty; | +ordinal:int; +name():String; +alias():char; +opposition():PieceParty; +orientation:byte; ]
[PieceType| +ordinal:int; +name():String; +alias():char; +rating():double; +motions():RelativeMotion 0..*; ]
[ChessPieceType| _+PAWN:ChessPieceType; _+KING:ChessPieceType; _+QUEEN:ChessPieceType; _+ROOK:ChessPieceType; _+BISHOP:ChessPieceType; _+KNIGHT:ChessPieceType; ...; | ...;]-.-^[PieceType]
[DroughtsPieceType| _+MAN:DroughtsPieceType; _+KING:DroughtsPieceType; | ...;]-.-^[PieceType]
[RelativeMotion]<0..* - 1[PieceType]

[Piece| +ordinal:int; +name():String; +alias():char; +getParty():PieceParty; +getType():PieceType; +getRank():byte; +getFile():byte; +rating():double; +getMotions():AbsoluteMotion 0..*; +getMotionMap():long 0..*; ]
[AbstractPiece| ...; | ...; ]-.-^[Piece]
[ChessPiece| _-PIECE_CACHE:ChessPiece 0..*; | +_valueOf(...):ChessPiece; ...; ]-^[AbstractPiece]
[DroughtsPiece| _-PIECE_CACHE:DroughtsPiece 0..*; | +_valueOf(...):DroughtsPiece; ...; ]-^[AbstractPiece]
[Piece]0..* - 1>[PieceParty]
[Piece]0..* - 1>[PieceType]
[AbsoluteMotion]<0..* - 1[Piece]

[Prediction| -moveSequence:Motion 0..*; -rating:double; | ...; ]
[Board| +clone():Board; +rankCount():byte; +fileCount():byte; +getMoveClock():short; +getReversibleMoveClock():short; +toPieceStream(party:PieceParty type:PieceType):Stream; +getPieces(party:PieceParty type:PieceType):Piece 0..*; +getPiece(rank:byte file:byte):Piece; +addPiece(piece:Piece); +removePiece(piece:Piece); +rating():double; +candidateMoves():AbsoluteMotion 0..*; +threatens(party:PieceParty rank:byte file:byte):boolean; +move(move:AbsoluteMotion 0..*); +analyze(searchDepth:int):Prediction; +analyzeUninterruptibly(searchDepth:int):Prediction; ...; ]
[AbstractBoard| -rankCount:byte; -fileCount:byte; -moveClock:short; -reversibleMoveClock:short; | ...; ]-.-^[Board]
[ChessBoard| ...; _+newInstance(:Class :byte :byte):ChessBoard; +getPassingPawn():ChessPiece 0..1; +getCastlingAbilities():byte; ...; ]-.-^[Board]
[AbstractChessBoard| -castlingAbilities:byte; -passingPawn:Piece; | ...; ]
[AbstractChessBoard]-^[AbstractBoard]
[AbstractChessBoard]-.-^[ChessBoard]
[ArrayChessBoard| -pieces:Piece 0..*; -whiteKing:Piece; -blackKing:Piece; | ...; ]-^[AbstractChessBoard]
[DroughtsBoard| ...; _+newInstance(:Class :byte :byte):DroughtsBoard; ...; ]-.-^[Board]
[AbstractDroughtsBoard| | ...; ]
[AbstractDroughtsBoard]-^[AbstractBoard]
[AbstractDroughtsBoard]-.-^[DroughtsBoard]
[ArrayDroughtsBoard| -pieces:Piece 0..*; | ...; ]-^[AbstractDroughtsBoard]
[Board]0..* - 0..*>[Piece]
[Board]0..* - 0..*>[AbsoluteMotion]
[Board]-.->[Prediction]

[ChessClient| -board:ChessBoard; | _+main(args:String 0..*); ...; ]1 - 1..*>[ChessBoard]
[DroughtsClient| -board:DroughtsBoard; | _+main(args:String 0..*); ...; ]1 - 1..*>[DroughtsBoard]
